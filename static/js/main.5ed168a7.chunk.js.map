{"version":3,"sources":["components/MainFooter/index.js","components/MainHeader/index.js","components/About/index.js","components/Contact/index.js","components/Works/index.js","App.js","serviceWorker.js","index.js"],"names":["MainFooter","className","Component","MainHeader","role","color","Brand","Item","renderAs","href","Burger","Menu","Container","position","About","size","Body","Contact","Works","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAoBeA,E,iLAfP,OACI,kBAAC,SAAD,CAAQC,UAAU,UACd,yBAAKA,UAAU,aACX,yBAAKA,UAAU,6BACX,2BACI,uDADJ,6B,GANCC,aC6CVC,E,iLA7BP,OACI,kBAAC,SAAD,CAAQF,UAAU,eAAeG,KAAK,aAAaC,MAAM,SACrD,kBAAC,SAAOC,MAAR,KACI,kBAAC,SAAOC,KAAR,CAAaC,SAAS,IAAIC,KAAK,KAC3B,wBAAIR,UAAU,cAAd,OAEJ,kBAAC,SAAOS,OAAR,OAEJ,kBAAC,SAAOC,KAAR,KACI,kBAAC,SAAOC,UAAR,CAAkBC,SAAS,OACvB,kBAAC,SAAON,KAAR,CAAaE,KAAK,KACd,wBAAIR,UAAU,cAAd,SAEJ,kBAAC,SAAOM,KAAR,CAAaE,KAAK,UACd,wBAAIR,UAAU,cAAd,UAEJ,kBAAC,SAAOM,KAAR,CAAaE,KAAK,KACd,wBAAIR,UAAU,cAAd,UAEJ,kBAAC,SAAOM,KAAR,CAAaE,KAAK,KACd,wBAAIR,UAAU,cAAd,mB,GAtBHC,aCFVY,E,iLAVP,OACI,kBAAC,OAAD,CAAMT,MAAM,UAAUU,KAAK,cACvB,kBAAC,OAAKC,KAAN,KACI,wBAAIf,UAAU,cAAd,wB,GALAC,aCYLe,E,iLAVP,OACI,kBAAC,OAAD,CAAMZ,MAAM,SAASU,KAAK,cACtB,kBAAC,OAAKC,KAAN,KACI,wBAAIf,UAAU,cAAd,mB,GALEC,aCYPgB,E,iLAVP,OACI,kBAAC,OAAD,CAAMb,MAAM,UAAUU,KAAK,cACvB,kBAAC,OAAKC,KAAN,KACI,wBAAIf,UAAU,cAAd,iB,GALAC,a,MCmBLiB,MAbf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5ed168a7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Hero, Container, Content, Footer, Columns } from 'react-bulma-components';\r\n\r\nclass MainFooter extends Component {\r\n    render() {\r\n        return (\r\n            <Footer className=\"footer\">\r\n                <div className=\"container\">\r\n                    <div className=\"content has-text-centered\">\r\n                        <p>\r\n                            <strong>Santiago Dellepiane</strong> Powered by React.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </Footer>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainFooter;","import React, { Component } from 'react';\r\nimport { Navbar } from 'react-bulma-components';\r\n\r\nconst colors = {\r\n    Default: '',\r\n    primary: 'primary',\r\n    info: 'info',\r\n    danger: 'danger',\r\n    warning: 'warning',\r\n    success: 'success',\r\n    white: 'white',\r\n    black: 'black',\r\n    light: 'light',\r\n    dark: 'dark',\r\n    link: 'link',\r\n};\r\n\r\nclass MainHeader extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar className=\"is-fixed-top\" role=\"navigation\" color='white' >\r\n                <Navbar.Brand>\r\n                    <Navbar.Item renderAs=\"a\" href=\"#\">\r\n                        <h1 className='title is-1'>SD</h1>\r\n                    </Navbar.Item>\r\n                    <Navbar.Burger />\r\n                </Navbar.Brand>\r\n                <Navbar.Menu >\r\n                    <Navbar.Container position=\"end\">\r\n                        <Navbar.Item href=\"#\">\r\n                            <h3 className='title is-3'>Home</h3>\r\n                        </Navbar.Item>\r\n                        <Navbar.Item href=\"#About\">\r\n                            <h3 className='title is-3'>About</h3>\r\n                        </Navbar.Item>\r\n                        <Navbar.Item href=\"#\">\r\n                            <h3 className='title is-3'>Works</h3>\r\n                        </Navbar.Item>\r\n                        <Navbar.Item href=\"#\">\r\n                            <h3 className='title is-3'>Contact</h3>\r\n                        </Navbar.Item>\r\n                    </Navbar.Container>\r\n                </Navbar.Menu>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainHeader;","import React, { Component } from 'react';\r\nimport { Hero, Container, Content, Footer, Columns } from 'react-bulma-components';\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return (\r\n            <Hero color=\"primary\" size=\"fullheight\" >\r\n                <Hero.Body>\r\n                    <h1 className=\"title is-1\"> Hello friend.</h1>\r\n                </Hero.Body>\r\n            </Hero>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React, { Component } from 'react';\r\nimport { Hero } from 'react-bulma-components';\r\n\r\nclass Contact extends Component {\r\n    render() {\r\n        return (\r\n            <Hero color=\"danger\" size=\"fullheight\" >\r\n                <Hero.Body>\r\n                    <h1 className=\"title is-1\"> Contact.</h1>\r\n                </Hero.Body>\r\n            </Hero>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;","import React, { Component } from 'react';\r\nimport { Hero } from 'react-bulma-components';\r\n\r\nclass Works extends Component {\r\n    render() {\r\n        return (\r\n            <Hero color=\"success\" size=\"fullheight\" >\r\n                <Hero.Body>\r\n                    <h1 className=\"title is-1\"> Works.</h1>\r\n                </Hero.Body>\r\n            </Hero>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Works;","import React from 'react';\r\nimport MainFooter from './components/MainFooter'\r\nimport MainHeader from './components/MainHeader'\r\nimport About from './components/About'\r\nimport Contact from './components/Contact'\r\nimport Works from './components/Works'\r\n\r\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <MainHeader></MainHeader>\r\n      <About></About>\r\n      <Works></Works>\r\n      <Contact></Contact>\r\n      <MainFooter></MainFooter>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}